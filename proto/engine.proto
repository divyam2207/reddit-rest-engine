syntax = "proto3";

package reddit;

option go_package = "./proto";

// Messages for User Management
message RegisterUserRequest {
  string username = 1;
}

message RegisterUserResponse {
  string message = 1;
}

// Messages for Subreddit Management
message CreateSubredditRequest {
  string name = 1;
}

message CreateSubredditResponse {
  string message = 1;
}

message JoinSubredditRequest {
  string subreddit = 1;
  string username = 2;
}

message JoinSubredditResponse {
  string message = 1;
}

// Messages for Posts
message PostRequest {
  string subreddit = 1;
  string author = 2;
  string content = 3;
}

message PostResponse {
  string message = 1;
}

// Messages for Comments
message CommentRequest {
  string subreddit = 1;
  int32 post_id = 2;
  string author = 3;
  string content = 4;
}

message CommentResponse {
  string message = 1;
}

// Messages for Voting
message VoteRequest {
  string subreddit = 1;
  int32 post_id = 2;
  string username = 3;
  bool upvote = 4;
}

message VoteResponse {
  string message = 1;
}

// Messages for Subreddit State
message FetchSubredditStateRequest {
  string name = 1;
}

message FetchSubredditStateResponse {
  string name = 1;
  repeated string members = 2;
  repeated Post posts = 3;
}

// Messages for Direct Messaging
message DirectMessageRequest {
  string from = 1;
  string to = 2;
  string content = 3;
}

message DirectMessageResponse {
  string message = 1;
}

// Common Structures
message Post {
  int32 id = 1;
  string author = 2;
  string content = 3;
  int32 upvotes = 4;
  int32 downvotes = 5;
  repeated Comment comments = 6;
}

message Comment {
  int32 id = 1;
  string author = 2;
  string content = 3;
}

// Service Declaration (for reference, even though Proto.Actor is used)
service RedditEngine {
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse);
  rpc CreateSubreddit(CreateSubredditRequest) returns (CreateSubredditResponse);
  rpc JoinSubreddit(JoinSubredditRequest) returns (JoinSubredditResponse);
  rpc Post(PostRequest) returns (PostResponse);
  rpc Comment(CommentRequest) returns (CommentResponse);
  rpc Vote(VoteRequest) returns (VoteResponse);
  rpc FetchSubredditState(FetchSubredditStateRequest) returns (FetchSubredditStateResponse);
  rpc SendDirectMessage(DirectMessageRequest) returns (DirectMessageResponse);
}
